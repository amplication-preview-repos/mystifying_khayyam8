/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LabRequestService } from "../labRequest.service";
import { LabRequestCreateInput } from "./LabRequestCreateInput";
import { LabRequest } from "./LabRequest";
import { LabRequestFindManyArgs } from "./LabRequestFindManyArgs";
import { LabRequestWhereUniqueInput } from "./LabRequestWhereUniqueInput";
import { LabRequestUpdateInput } from "./LabRequestUpdateInput";
import { LabReportFindManyArgs } from "../../labReport/base/LabReportFindManyArgs";
import { LabReport } from "../../labReport/base/LabReport";
import { LabReportWhereUniqueInput } from "../../labReport/base/LabReportWhereUniqueInput";

export class LabRequestControllerBase {
  constructor(protected readonly service: LabRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LabRequest })
  async createLabRequest(
    @common.Body() data: LabRequestCreateInput
  ): Promise<LabRequest> {
    return await this.service.createLabRequest({
      data: {
        ...data,

        consultation: data.consultation
          ? {
              connect: data.consultation,
            }
          : undefined,
      },
      select: {
        consultation: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        instructions: true,
        labName: true,
        requestDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LabRequest] })
  @ApiNestedQuery(LabRequestFindManyArgs)
  async labRequests(@common.Req() request: Request): Promise<LabRequest[]> {
    const args = plainToClass(LabRequestFindManyArgs, request.query);
    return this.service.labRequests({
      ...args,
      select: {
        consultation: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        instructions: true,
        labName: true,
        requestDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LabRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async labRequest(
    @common.Param() params: LabRequestWhereUniqueInput
  ): Promise<LabRequest | null> {
    const result = await this.service.labRequest({
      where: params,
      select: {
        consultation: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        instructions: true,
        labName: true,
        requestDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LabRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLabRequest(
    @common.Param() params: LabRequestWhereUniqueInput,
    @common.Body() data: LabRequestUpdateInput
  ): Promise<LabRequest | null> {
    try {
      return await this.service.updateLabRequest({
        where: params,
        data: {
          ...data,

          consultation: data.consultation
            ? {
                connect: data.consultation,
              }
            : undefined,
        },
        select: {
          consultation: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          instructions: true,
          labName: true,
          requestDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LabRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLabRequest(
    @common.Param() params: LabRequestWhereUniqueInput
  ): Promise<LabRequest | null> {
    try {
      return await this.service.deleteLabRequest({
        where: params,
        select: {
          consultation: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          instructions: true,
          labName: true,
          requestDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/labReports")
  @ApiNestedQuery(LabReportFindManyArgs)
  async findLabReports(
    @common.Req() request: Request,
    @common.Param() params: LabRequestWhereUniqueInput
  ): Promise<LabReport[]> {
    const query = plainToClass(LabReportFindManyArgs, request.query);
    const results = await this.service.findLabReports(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        labRequest: {
          select: {
            id: true,
          },
        },

        reportDate: true,
        results: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/labReports")
  async connectLabReports(
    @common.Param() params: LabRequestWhereUniqueInput,
    @common.Body() body: LabReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      labReports: {
        connect: body,
      },
    };
    await this.service.updateLabRequest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/labReports")
  async updateLabReports(
    @common.Param() params: LabRequestWhereUniqueInput,
    @common.Body() body: LabReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      labReports: {
        set: body,
      },
    };
    await this.service.updateLabRequest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/labReports")
  async disconnectLabReports(
    @common.Param() params: LabRequestWhereUniqueInput,
    @common.Body() body: LabReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      labReports: {
        disconnect: body,
      },
    };
    await this.service.updateLabRequest({
      where: params,
      data,
      select: { id: true },
    });
  }
}
