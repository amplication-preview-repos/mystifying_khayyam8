/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LabRequest } from "./LabRequest";
import { LabRequestCountArgs } from "./LabRequestCountArgs";
import { LabRequestFindManyArgs } from "./LabRequestFindManyArgs";
import { LabRequestFindUniqueArgs } from "./LabRequestFindUniqueArgs";
import { CreateLabRequestArgs } from "./CreateLabRequestArgs";
import { UpdateLabRequestArgs } from "./UpdateLabRequestArgs";
import { DeleteLabRequestArgs } from "./DeleteLabRequestArgs";
import { LabReportFindManyArgs } from "../../labReport/base/LabReportFindManyArgs";
import { LabReport } from "../../labReport/base/LabReport";
import { Consultation } from "../../consultation/base/Consultation";
import { LabRequestService } from "../labRequest.service";
@graphql.Resolver(() => LabRequest)
export class LabRequestResolverBase {
  constructor(protected readonly service: LabRequestService) {}

  async _labRequestsMeta(
    @graphql.Args() args: LabRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LabRequest])
  async labRequests(
    @graphql.Args() args: LabRequestFindManyArgs
  ): Promise<LabRequest[]> {
    return this.service.labRequests(args);
  }

  @graphql.Query(() => LabRequest, { nullable: true })
  async labRequest(
    @graphql.Args() args: LabRequestFindUniqueArgs
  ): Promise<LabRequest | null> {
    const result = await this.service.labRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LabRequest)
  async createLabRequest(
    @graphql.Args() args: CreateLabRequestArgs
  ): Promise<LabRequest> {
    return await this.service.createLabRequest({
      ...args,
      data: {
        ...args.data,

        consultation: args.data.consultation
          ? {
              connect: args.data.consultation,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => LabRequest)
  async updateLabRequest(
    @graphql.Args() args: UpdateLabRequestArgs
  ): Promise<LabRequest | null> {
    try {
      return await this.service.updateLabRequest({
        ...args,
        data: {
          ...args.data,

          consultation: args.data.consultation
            ? {
                connect: args.data.consultation,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LabRequest)
  async deleteLabRequest(
    @graphql.Args() args: DeleteLabRequestArgs
  ): Promise<LabRequest | null> {
    try {
      return await this.service.deleteLabRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [LabReport], { name: "labReports" })
  async findLabReports(
    @graphql.Parent() parent: LabRequest,
    @graphql.Args() args: LabReportFindManyArgs
  ): Promise<LabReport[]> {
    const results = await this.service.findLabReports(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Consultation, {
    nullable: true,
    name: "consultation",
  })
  async getConsultation(
    @graphql.Parent() parent: LabRequest
  ): Promise<Consultation | null> {
    const result = await this.service.getConsultation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
