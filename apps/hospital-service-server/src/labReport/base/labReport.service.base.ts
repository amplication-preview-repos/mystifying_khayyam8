/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  LabReport as PrismaLabReport,
  LabRequest as PrismaLabRequest,
} from "@prisma/client";

export class LabReportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LabReportCountArgs, "select">
  ): Promise<number> {
    return this.prisma.labReport.count(args);
  }

  async labReports(
    args: Prisma.LabReportFindManyArgs
  ): Promise<PrismaLabReport[]> {
    return this.prisma.labReport.findMany(args);
  }
  async labReport(
    args: Prisma.LabReportFindUniqueArgs
  ): Promise<PrismaLabReport | null> {
    return this.prisma.labReport.findUnique(args);
  }
  async createLabReport(
    args: Prisma.LabReportCreateArgs
  ): Promise<PrismaLabReport> {
    return this.prisma.labReport.create(args);
  }
  async updateLabReport(
    args: Prisma.LabReportUpdateArgs
  ): Promise<PrismaLabReport> {
    return this.prisma.labReport.update(args);
  }
  async deleteLabReport(
    args: Prisma.LabReportDeleteArgs
  ): Promise<PrismaLabReport> {
    return this.prisma.labReport.delete(args);
  }

  async getLabRequest(parentId: string): Promise<PrismaLabRequest | null> {
    return this.prisma.labReport
      .findUnique({
        where: { id: parentId },
      })
      .labRequest();
  }
}
