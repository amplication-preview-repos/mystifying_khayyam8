/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LabReportService } from "../labReport.service";
import { LabReportCreateInput } from "./LabReportCreateInput";
import { LabReport } from "./LabReport";
import { LabReportFindManyArgs } from "./LabReportFindManyArgs";
import { LabReportWhereUniqueInput } from "./LabReportWhereUniqueInput";
import { LabReportUpdateInput } from "./LabReportUpdateInput";

export class LabReportControllerBase {
  constructor(protected readonly service: LabReportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LabReport })
  async createLabReport(
    @common.Body() data: LabReportCreateInput
  ): Promise<LabReport> {
    return await this.service.createLabReport({
      data: {
        ...data,

        labRequest: data.labRequest
          ? {
              connect: data.labRequest,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        labRequest: {
          select: {
            id: true,
          },
        },

        reportDate: true,
        results: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LabReport] })
  @ApiNestedQuery(LabReportFindManyArgs)
  async labReports(@common.Req() request: Request): Promise<LabReport[]> {
    const args = plainToClass(LabReportFindManyArgs, request.query);
    return this.service.labReports({
      ...args,
      select: {
        createdAt: true,
        id: true,

        labRequest: {
          select: {
            id: true,
          },
        },

        reportDate: true,
        results: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LabReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async labReport(
    @common.Param() params: LabReportWhereUniqueInput
  ): Promise<LabReport | null> {
    const result = await this.service.labReport({
      where: params,
      select: {
        createdAt: true,
        id: true,

        labRequest: {
          select: {
            id: true,
          },
        },

        reportDate: true,
        results: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LabReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLabReport(
    @common.Param() params: LabReportWhereUniqueInput,
    @common.Body() data: LabReportUpdateInput
  ): Promise<LabReport | null> {
    try {
      return await this.service.updateLabReport({
        where: params,
        data: {
          ...data,

          labRequest: data.labRequest
            ? {
                connect: data.labRequest,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          labRequest: {
            select: {
              id: true,
            },
          },

          reportDate: true,
          results: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LabReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLabReport(
    @common.Param() params: LabReportWhereUniqueInput
  ): Promise<LabReport | null> {
    try {
      return await this.service.deleteLabReport({
        where: params,
        select: {
          createdAt: true,
          id: true,

          labRequest: {
            select: {
              id: true,
            },
          },

          reportDate: true,
          results: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
