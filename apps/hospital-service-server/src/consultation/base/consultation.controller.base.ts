/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ConsultationService } from "../consultation.service";
import { ConsultationCreateInput } from "./ConsultationCreateInput";
import { Consultation } from "./Consultation";
import { ConsultationFindManyArgs } from "./ConsultationFindManyArgs";
import { ConsultationWhereUniqueInput } from "./ConsultationWhereUniqueInput";
import { ConsultationUpdateInput } from "./ConsultationUpdateInput";
import { LabRequestFindManyArgs } from "../../labRequest/base/LabRequestFindManyArgs";
import { LabRequest } from "../../labRequest/base/LabRequest";
import { LabRequestWhereUniqueInput } from "../../labRequest/base/LabRequestWhereUniqueInput";

export class ConsultationControllerBase {
  constructor(protected readonly service: ConsultationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Consultation })
  async createConsultation(
    @common.Body() data: ConsultationCreateInput
  ): Promise<Consultation> {
    return await this.service.createConsultation({
      data: {
        ...data,

        appointment: data.appointment
          ? {
              connect: data.appointment,
            }
          : undefined,
      },
      select: {
        appointment: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        endTime: true,
        id: true,
        startTime: true,
        summary: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Consultation] })
  @ApiNestedQuery(ConsultationFindManyArgs)
  async consultations(@common.Req() request: Request): Promise<Consultation[]> {
    const args = plainToClass(ConsultationFindManyArgs, request.query);
    return this.service.consultations({
      ...args,
      select: {
        appointment: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        endTime: true,
        id: true,
        startTime: true,
        summary: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Consultation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async consultation(
    @common.Param() params: ConsultationWhereUniqueInput
  ): Promise<Consultation | null> {
    const result = await this.service.consultation({
      where: params,
      select: {
        appointment: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        endTime: true,
        id: true,
        startTime: true,
        summary: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Consultation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateConsultation(
    @common.Param() params: ConsultationWhereUniqueInput,
    @common.Body() data: ConsultationUpdateInput
  ): Promise<Consultation | null> {
    try {
      return await this.service.updateConsultation({
        where: params,
        data: {
          ...data,

          appointment: data.appointment
            ? {
                connect: data.appointment,
              }
            : undefined,
        },
        select: {
          appointment: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          endTime: true,
          id: true,
          startTime: true,
          summary: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Consultation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteConsultation(
    @common.Param() params: ConsultationWhereUniqueInput
  ): Promise<Consultation | null> {
    try {
      return await this.service.deleteConsultation({
        where: params,
        select: {
          appointment: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          endTime: true,
          id: true,
          startTime: true,
          summary: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/labRequests")
  @ApiNestedQuery(LabRequestFindManyArgs)
  async findLabRequests(
    @common.Req() request: Request,
    @common.Param() params: ConsultationWhereUniqueInput
  ): Promise<LabRequest[]> {
    const query = plainToClass(LabRequestFindManyArgs, request.query);
    const results = await this.service.findLabRequests(params.id, {
      ...query,
      select: {
        consultation: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        instructions: true,
        labName: true,
        requestDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/labRequests")
  async connectLabRequests(
    @common.Param() params: ConsultationWhereUniqueInput,
    @common.Body() body: LabRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      labRequests: {
        connect: body,
      },
    };
    await this.service.updateConsultation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/labRequests")
  async updateLabRequests(
    @common.Param() params: ConsultationWhereUniqueInput,
    @common.Body() body: LabRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      labRequests: {
        set: body,
      },
    };
    await this.service.updateConsultation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/labRequests")
  async disconnectLabRequests(
    @common.Param() params: ConsultationWhereUniqueInput,
    @common.Body() body: LabRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      labRequests: {
        disconnect: body,
      },
    };
    await this.service.updateConsultation({
      where: params,
      data,
      select: { id: true },
    });
  }
}
